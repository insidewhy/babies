#!/usr/bin/env python

import sys
import argparse
import os

from babies.videos import watch_video, create_show_db, record_video, display_video, grep_show_record

def main():
    parser = argparse.ArgumentParser(description='enjoy your videos')

    paths_help = 'paths to videos and/or directories containing series and or/videos'

    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')
    create = subparsers.add_parser('create', help='create series db', aliases=['c'])
    create.add_argument('paths', help=paths_help, nargs='*')
    create.add_argument('-f', '--force', action='store_true', help='force overwrite of existing database')

    find = subparsers.add_parser('find', help='find entry in global record', aliases=['f'])
    find.add_argument(
        'search_terms', help='regular expressions, all must match', nargs='+'
    )
    find.add_argument('-q', '--quiet', action='store_true', help='only show video names')

    watch = subparsers.add_parser('watch', help='watch [next] show at each path', aliases=['w', 'night', 'n', 'dryrun', 'd', 'p', 'print'])
    watch.add_argument('paths', help=paths_help, nargs='*')
    watch.add_argument(
        '-d', '--dont-record', action='store_true', help='don\'t write to series or global records'
    )
    watch.add_argument(
        '-n', '--night-mode', action='store_true', help='normalise audio'
    )
    watch.add_argument(
        '-p', '--print', action='store_true', help='print shows rather than viewing them'
    )
    watch.add_argument('-s', '--sub-file', help='subtitle file')

    path_help = 'paths to video and/or directory containing series and or/video'
    record = subparsers.add_parser('record', help='record having watched video', aliases=['r'])
    record.add_argument('path', help=path_help, type=str)
    record.add_argument('comment', help='comment to record with video', type=str)

    argv = sys.argv[1:]
    # if the first argument is a file then prepend the "watch" command
    if len(argv) and '.' in argv[0]:
        argv = ['w'] + argv

    args = parser.parse_args(argv)

    paths = []
    try:
        if args.paths:
            paths = args.paths
    except AttributeError:
        pass
    if not paths:
         paths = [os.getcwd()]

    subcommand = args.subcommand
    if subcommand is None:
        watch_video(os.getcwd(), False, False, None)
    elif subcommand == 'create' or subcommand == 'c':
        for path in paths:
            create_show_db(path, args.force)
    elif subcommand == 'find' or subcommand == 'f':
        grep_show_record(args.search_terms, args.quiet)
    elif subcommand == 'record' or subcommand == 'r':
        record_video(args.path, args.comment)
    else:
        print_show = subcommand == 'print' or subcommand == 'p'
        if print_show or args.print:
            for path in paths:
                display_video(path)
            return

        night_mode = subcommand == 'night' or subcommand == 'n'
        dry_run = subcommand == 'dryrun' or subcommand == 'd'
        if night_mode or dry_run or print_show or subcommand == 'watch' or subcommand == 'w':
            for path in paths:
                watch_video(path, dry_run or args.dont_record, night_mode or args.night_mode, args.sub_file)


try:
    main()
except ValueError as err:
    print(err.args[0])
