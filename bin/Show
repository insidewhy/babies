#!/usr/bin/env python

import mpv
import sys
import argparse
import os
from types import SimpleNamespace

from libshow.db import Db

SHOW_EXTENSIONS = [
    'mkv',
    'avi',
    'mpg',
    'mp4',
    'mpeg',
    'ogv',
    'wmv',
    'flv',
    'm4v',
    'iso',
    'mov'
]

def log_mpv(loglevel, component, message):
    print('[{}] {}: {}'.format(loglevel, component, message))

def watch_video(video):
    player = mpv.MPV(log_handler=log_mpv, input_default_bindings=True, input_vo_keyboard=True, fullscreen=True)

    session = SimpleNamespace(position=None)

    @player.on_key_press('q')
    def quit_binding():
        session.position = player.time_pos
        player.quit()

    db = Db()
    db.load_series(os.path.dirname(video))

    player.play(video)

    # get duration of video
    def set_duration(x):
        if x:
            session.duration = x
            return True
    player.wait_for_property('duration', set_duration, False)

    # wait for video to end
    player.wait_for_playback()

    if session.position is None:
        session.position = session.duration

    print('TODO: update databases, position=', session.position, 'duration=', session.duration)

def is_video(path):
    for suffix in SHOW_EXTENSIONS:
        if path.endswith('.' + suffix):
            return True
    return False

def create_show_db(dirpath, force):
    db = Db()

    # TODO: merge new content with old content instead
    if not force and os.path.isfile(db.get_series_db_path(dirpath)):
        raise ValueError('new database already exists')

    for filename in sorted(os.listdir(dirpath)):
        if is_video(filename):
            db.add_show_to_series(filename)

    db.write_series(dirpath)


def convert_show_db(dirpath, force):
    db = Db()
    if not force and os.path.isfile(db.get_series_db_path(dirpath)):
        raise ValueError('new database already exists')

    new_filepath = db.get_series_db_path(dirpath)
    db.load_series_v0(dirpath)
    db.write_series(dirpath)

def main():
    parser = argparse.ArgumentParser(description='enjoy your videos')
    parser.add_argument('-c', '--create', action='store_true', help='create series database for videos in current directory')
    parser.add_argument('-C', '--convert', action='store_true', help='convert series database to new version')
    parser.add_argument('-f', '--force', action='store_true', help='force overwrite etc.')
    parser.add_argument('videos', help='videos or directories containing videos', nargs='*')
    args = parser.parse_args()

    def get_dir_or_videos():
        videos = args.videos
        return [ os.getcwd() ] if not videos else videos

    if args.create:
        for video in get_dir_or_videos():
            create_show_db(video, args.force)
    elif args.convert:
        for video in get_dir_or_videos():
            convert_show_db(video, args.force)
    elif not args.videos:
        print('TODO: look for video to watch in current directory')
    else:
        for video in args.videos:
            watch_video(video)

try:
    main()
except ValueError as err:
    print(err.args[0])
